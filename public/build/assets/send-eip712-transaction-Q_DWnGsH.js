import{e as _}from"./eth_sendRawTransaction-DPdnXbFR.js";import{u as G,B as b,T as x,ai as L,a9 as o,G as f,ak as v,am as p,b as F,au as z}from"./app-XxEHKJQt.js";import{concatHex as S}from"./concat-hex-aYp195_m.js";import{s as D,t as M}from"./sha256-0G9ccw8R.js";const $=2n**16n-1n,J=2n**96n-1n;function l(n){if(["string","number"].includes(typeof n)&&!Number.isInteger(Number(n)))throw new Error(`Expected value to be an integer to convert to a bigint, got ${n} of type ${typeof n}`);return n instanceof Uint8Array?BigInt(G(n)):BigInt(n)}const P=$*32n;class H extends b{constructor({givenLength:t,maxBytecodeSize:e}){super(`Bytecode cannot be longer than ${e} bytes. Given length: ${t}`,{name:"BytecodeLengthExceedsMaxSizeError"})}}class O extends b{constructor({givenLengthInWords:t}){super(`Bytecode length in 32-byte words must be odd. Given length in words: ${t}`,{name:"BytecodeLengthInWordsMustBeOddError"})}}class U extends b{constructor({givenLength:t}){super(`The bytecode length in bytes must be divisible by 32. Given length: ${t}`,{name:"BytecodeLengthMustBeDivisibleBy32Error"})}}function W(n){const t=x(n);if(t.length%32!==0)throw new U({givenLength:t.length});if(t.length>P)throw new H({givenLength:t.length,maxBytecodeSize:P});const e=D(t),a=x(e),s=t.length/32;if(s%2===0)throw new O({givenLengthInWords:s});const r=x(s),i=L(r,{size:2}),m=new Uint8Array([1,0]);return a.set(m,0),a.set(i,2),a}const B=50000n,k=n=>{const t=A(n);return{domain:{name:"zkSync",version:"2",chainId:n.chainId},types:{Transaction:[{name:"txType",type:"uint256"},{name:"from",type:"uint256"},{name:"to",type:"uint256"},{name:"gasLimit",type:"uint256"},{name:"gasPerPubdataByteLimit",type:"uint256"},{name:"maxFeePerGas",type:"uint256"},{name:"maxPriorityFeePerGas",type:"uint256"},{name:"paymaster",type:"uint256"},{name:"nonce",type:"uint256"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"factoryDeps",type:"bytes32[]"},{name:"paymasterInput",type:"bytes"}]},primaryType:"Transaction",message:t}};function A(n){const{gas:t,nonce:e,to:a,from:s,value:r,maxFeePerGas:i,maxPriorityFeePerGas:m,paymaster:u,paymasterInput:y,gasPerPubdata:h,data:d,factoryDeps:c}=n;return{txType:113n,from:BigInt(s),to:a?BigInt(a):0n,gasLimit:t??0n,gasPerPubdataByteLimit:h??B,maxFeePerGas:i??0n,maxPriorityFeePerGas:m??0n,paymaster:u?BigInt(u):0n,nonce:e?BigInt(e):0n,value:r??0n,data:d||"0x0",factoryDeps:(c==null?void 0:c.map(g=>o(W(g))))??[],paymasterInput:y||"0x"}}async function R(n){const{account:t,transaction:e}=n,a=await I(n),s=await T({account:t,eip712Transaction:a,chainId:e.chain.id}),r=f(e);return{transactionHash:await _(r,s),chain:e.chain,client:e.client}}async function T(n){const{account:t,eip712Transaction:e,chainId:a}=n,s=k(e),r=await t.signTypedData({...s});return j({...e,chainId:a,customSignature:r})}async function I(n){const{account:t,transaction:e}=n;let[a,s,r,i,m,u,y]=await Promise.all([v(e),p(e.to),p(e.value),p(e.gas),p(e.maxFeePerGas),p(e.maxPriorityFeePerGas),p(e.eip712).then(d=>d==null?void 0:d.gasPerPubdata)]);if(!i||!m||!u){const c=await f(e)({method:"zks_estimateFee",params:[{from:t.address,to:s,data:a,value:r?F(r):void 0}]});i=l(c.gas_limit),m=l(c.max_fee_per_gas)*2n,u=l(c.max_priority_fee_per_gas)||1n,y=l(c.gas_per_pubdata_limit)*2n}return{...await z({transaction:{...e,gas:i,maxFeePerGas:m,maxPriorityFeePerGas:u},from:t.address}),...e.eip712,gasPerPubdata:y,from:t.address}}function j(n){const{chainId:t,gas:e,nonce:a,to:s,from:r,value:i,maxFeePerGas:m,maxPriorityFeePerGas:u,customSignature:y,factoryDeps:h,paymaster:d,paymasterInput:c,gasPerPubdata:g,data:w}=n,E=[a?o(a):"0x",u?o(u):"0x",m?o(m):"0x",e?o(e):"0x",s??"0x",i?o(i):"0x",w??"0x0",o(t),o(""),o(""),o(t),r??"0x",g?o(g):o(B),h??[],y??"0x",d&&c?[d,c]:[]];return S(["0x71",M(E)])}const K=Object.freeze(Object.defineProperty({__proto__:null,populateEip712Transaction:I,sendEip712Transaction:R,signEip712Transaction:T},Symbol.toStringTag,{value:"Module"}));export{K as a,J as m,I as p,T as s};
